{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import getpass\n",
    "\n",
    "chatgpt_token = getpass.getpass(prompt=\"Enter ChatGPT API token...\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the manifest data\n",
    "manifest_file = './benchmark/ground_truth.csv'\n",
    "with open(manifest_file, 'r') as input_fh:\n",
    "    raw_data = input_fh.readlines()\n",
    "\n",
    "# Parse the data\n",
    "manifest = {}\n",
    "for line in raw_data[1:]:\n",
    "    line_split = line.strip().split(',')\n",
    "\n",
    "    if line_split[2] == 'true':\n",
    "        true_positive = True\n",
    "    else:\n",
    "        true_positive = False\n",
    "\n",
    "    manifest.update({line_split[0]: {\"category\": line_split[1],\n",
    "                                     \"true_positive\": true_positive,\n",
    "                                     \"cwe\": 'CWE-' + line_split[3]}})\n",
    "    \n",
    "print(manifest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Baseline Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testcase                  | True CWE   | True Positive?  | Detected CWE    | Result         \n",
      "====================================================================================================\n",
      "BenchmarkTest01224        | CWE-643    | 1               | CWE-20          | Potential True Positive\n",
      "BenchmarkTest00321        | CWE-501    | 1               | CWE-352         | Potential True Positive\n",
      "BenchmarkTest00008        | CWE-89     | 1               | CWE-89          | True Positive  \n",
      "BenchmarkTest00090        | CWE-78     | 0               | CWE-78          | False Positive \n",
      "BenchmarkTest00028        | CWE-22     | 1               | CWE-22          | True Positive  \n",
      "BenchmarkTest00252        | CWE-501    | 0               | CWE-20          | False Positive \n",
      "BenchmarkTest00069        | CWE-328    | 0               | CWE-276         | False Positive \n",
      "BenchmarkTest00086        | CWE-330    | 1               | CWE-336         | Potential True Positive\n",
      "BenchmarkTest00012        | CWE-90     | 1               | CWE-88          | Potential True Positive\n",
      "BenchmarkTest00442        | CWE-643    | 1               | CWE-20          | Potential True Positive\n",
      "BenchmarkTest00100        | CWE-89     | 1               | CWE-89          | True Positive  \n",
      "BenchmarkTest00116        | CWE-643    | 0               | CWE-78          | False Positive \n",
      "BenchmarkTest00004        | CWE-501    | 1               | CWE-201         | Potential True Positive\n",
      "BenchmarkTest00140        | CWE-330    | 1               | CWE-336         | Potential True Positive\n",
      "BenchmarkTest00005        | CWE-327    | 1               | CWE-328         | Potential True Positive\n",
      "BenchmarkTest00117        | CWE-643    | 0               | CWE-94          | False Positive \n",
      "BenchmarkTest00052        | CWE-89     | 0               | CWE-89          | False Positive \n",
      "BenchmarkTest00101        | CWE-89     | 1               | CWE-89          | True Positive  \n",
      "BenchmarkTest00044        | CWE-90     | 1               | CWE- LDAP Injection (CWE-74) | Potential True Positive\n",
      "BenchmarkTest00087        | CWE-614    | 1               | CWE- setting of cookie without secure flag | Potential True Positive\n",
      "BenchmarkTest00300        | CWE-614    | 1               | CWE-1004        | Potential True Positive\n",
      "BenchmarkTest00029        | CWE-328    | 1               | CWE-347         | Potential True Positive\n",
      "BenchmarkTest00009        | CWE-328    | 0               | CWE-737         | False Positive \n",
      "BenchmarkTest00064        | CWE-22     | 0               | CWE-22          | False Positive \n",
      "BenchmarkTest00121        | CWE-327    | 0               | CWE-327         | False Positive \n",
      "BenchmarkTest00530        | CWE-90     | 0               | CWE- LDAP Injection (CWE-90) | False Positive \n",
      "BenchmarkTest00072        | CWE-328    | 0               | CWE-347         | False Positive \n",
      "BenchmarkTest00096        | CWE-330    | 0               | CWE-336         | False Positive \n",
      "BenchmarkTest00242        | CWE-614    | 0               | CWE-20          | False Positive \n",
      "BenchmarkTest00151        | CWE-79     | 0               | CWE-79          | False Positive \n",
      "BenchmarkTest00278        | CWE-79     | 0               | CWE-79          | False Positive \n",
      "BenchmarkTest00106        | CWE-89     | 1               | CWE-89          | True Positive  \n",
      "BenchmarkTest00043        | CWE-89     | 1               | CWE-89          | True Positive  \n",
      "BenchmarkTest00110        | CWE-89     | 0               | CWE-89          | False Positive \n",
      "BenchmarkTest00147        | CWE-79     | 0               | CWE-80          | False Positive \n",
      "BenchmarkTest00002        | CWE-22     | 1               | CWE-22          | True Positive  \n",
      "BenchmarkTest00075        | CWE-328    | 0               | CWE-326         | False Positive \n",
      "BenchmarkTest00022        | CWE-328    | 0               | CWE-760         | False Positive \n",
      "BenchmarkTest00171        | CWE-78     | 0               | CWE-77          | False Positive \n",
      "BenchmarkTest00063        | CWE-22     | 0               | CWE-22          | False Positive \n",
      "BenchmarkTest00059        | CWE-327    | 0               | CWE-310         | False Positive \n",
      "BenchmarkTest00058        | CWE-327    | 0               | CWE-327         | False Positive \n",
      "BenchmarkTest00367        | CWE-90     | 0               | CWE- LDAP Injection. | False Positive \n",
      "BenchmarkTest00019        | CWE-327    | 1               | CWE-329         | Potential True Positive\n",
      "BenchmarkTest00275        | CWE-79     | 0               | CWE-80          | False Positive \n",
      "BenchmarkTest01223        | CWE-643    | 1               | CWE-20          | Potential True Positive\n",
      "BenchmarkTest00035        | CWE-327    | 1               | CWE-329         | Potential True Positive\n",
      "BenchmarkTest00170        | CWE-614    | 1               | CWE-601         | Potential True Positive\n",
      "BenchmarkTest00520        | CWE-643    | 0               | CWE-20          | False Positive \n",
      "BenchmarkTest00189        | CWE-501    | 0               | CWE-79          | False Positive \n",
      "BenchmarkTest00023        | CWE-330    | 1               | CWE-330         | True Positive  \n",
      "BenchmarkTest00131        | CWE-22     | 0               | CWE-22          | False Positive \n",
      "BenchmarkTest00003        | CWE-328    | 1               | CWE-327         | Potential True Positive\n",
      "BenchmarkTest00054        | CWE-327    | 0               | CWE-327         | False Positive \n",
      "BenchmarkTest00404        | CWE-614    | 0               | CWE-20          | False Positive \n",
      "BenchmarkTest00107        | CWE-89     | 0               | CWE-89          | False Positive \n",
      "BenchmarkTest00042        | CWE-330    | 0               | CWE-338         | False Positive \n",
      "BenchmarkTest00150        | CWE-79     | 1               | CWE-79          | True Positive  \n",
      "BenchmarkTest00015        | CWE-78     | 1               | CWE-78          | True Positive  \n",
      "BenchmarkTest00097        | CWE-501    | 0               | CWE-601         | False Positive \n",
      "BenchmarkTest00104        | CWE-89     | 0               | CWE-89          | False Positive \n",
      "BenchmarkTest00016        | CWE-614    | 0               | CWE-502         | False Positive \n",
      "BenchmarkTest00153        | CWE-79     | 1               | CWE-80          | Potential True Positive\n",
      "BenchmarkTest00169        | CWE-614    | 1               | CWE-614         | True Positive  \n",
      "BenchmarkTest00094        | CWE-330    | 0               | CWE-338         | False Positive \n",
      "BenchmarkTest00149        | CWE-79     | 1               | CWE-79          | True Positive  \n",
      "BenchmarkTest00630        | CWE-90     | 1               | CWE-89          | Potential True Positive\n",
      "BenchmarkTest00020        | CWE-327    | 1               | CWE-326         | Potential True Positive\n",
      "BenchmarkTest00132        | CWE-22     | 0               | CWE-22          | False Positive \n",
      "BenchmarkTest00098        | CWE-501    | 1               | CWE-201         | Potential True Positive\n",
      "BenchmarkTest00077        | CWE-78     | 1               | CWE-78          | True Positive  \n",
      "BenchmarkTest00099        | CWE-501    | 0               | CWE-201         | False Positive \n",
      "BenchmarkTest00021        | CWE-90     | 1               | CWE- Injection  | Potential True Positive\n",
      "BenchmarkTest00277        | CWE-79     | 0               | CWE-79          | False Positive \n",
      "BenchmarkTest00148        | CWE-79     | 1               | CWE-79          | True Positive  \n",
      "BenchmarkTest00095        | CWE-330    | 0               | CWE-338         | False Positive \n",
      "BenchmarkTest00241        | CWE-614    | 1               | CWE-326         | Potential True Positive\n",
      "BenchmarkTest00607        | CWE-643    | 1               | CWE-XPathInjection | Potential True Positive\n",
      "BenchmarkTest00017        | CWE-78     | 1               | CWE-78          | True Positive  \n",
      "BenchmarkTest00152        | CWE-79     | 1               | CWE-79          | True Positive  \n",
      "BenchmarkTest00040        | CWE-22     | 1               | CWE-22          | True Positive  \n",
      "BenchmarkTest00105        | CWE-89     | 0               | CWE-89          | False Positive \n",
      "BenchmarkTest00001        | CWE-22     | 1               | CWE-22          | True Positive  \n",
      "BenchmarkTest00118        | CWE-643    | 0               | CWE-20          | False Positive \n",
      "BenchmarkTest00088        | CWE-614    | 0               | CWE-693         | False Positive \n",
      "BenchmarkTest00122        | CWE-327    | 0               | CWE-303         | False Positive \n",
      "BenchmarkTest00860        | CWE-90     | 0               | CWE-89          | False Positive \n",
      "BenchmarkTest00134        | CWE-22     | 0               | CWE-22          | False Positive \n",
      "BenchmarkTest00071        | CWE-328    | 1               | CWE-20          | Potential True Positive\n",
      "BenchmarkTest00006        | CWE-78     | 1               | CWE-78          | True Positive  \n",
      "BenchmarkTest00051        | CWE-78     | 0               | CWE-78          | False Positive \n",
      "BenchmarkTest00694        | CWE-90     | 1               | CWE-LDAP-1      | Potential True Positive\n",
      "BenchmarkTest00010        | CWE-330    | 0               | CWE-336         | False Positive \n",
      "BenchmarkTest00207        | CWE-643    | 1               | CWE-20          | Potential True Positive\n",
      "BenchmarkTest00084        | CWE-330    | 1               | CWE-330         | True Positive  \n",
      "BenchmarkTest00250        | CWE-501    | 0               | CWE-77          | False Positive \n",
      "BenchmarkTest00138        | CWE-90     | 0               | CWE- Injection  | False Positive \n",
      "BenchmarkTest00093        | CWE-78     | 0               | CWE-78          | False Positive \n",
      "BenchmarkTest00139        | CWE-90     | 0               | CWE-90          | False Positive \n",
      "BenchmarkTest00251        | CWE-501    | 1               | CWE-276         | Potential True Positive\n",
      "BenchmarkTest00085        | CWE-330    | 1               | CWE-330         | True Positive  \n",
      "BenchmarkTest00011        | CWE-22     | 1               | CWE-22          | True Positive  \n",
      "BenchmarkTest00046        | CWE-328    | 1               | CWE-327         | Potential True Positive\n",
      "BenchmarkTest00050        | CWE-327    | 1               | CWE-327         | True Positive  \n",
      "BenchmarkTest00683        | CWE-643    | 0               | CWE-20          | False Positive \n",
      "BenchmarkTest00007        | CWE-78     | 1               | CWE-78          | True Positive  \n",
      "BenchmarkTest00070        | CWE-328    | 1               | CWE-932         | Potential True Positive\n",
      "BenchmarkTest00031        | CWE-501    | 1               | CWE-601         | Potential True Positive\n",
      "BenchmarkTest00089        | CWE-614    | 0               | CWE-201         | False Positive \n",
      "BenchmarkTest00158        | CWE-78     | 0               | CWE-78          | False Positive \n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "import glob\n",
    "import pathlib\n",
    "from openai import OpenAI\n",
    "\n",
    "# Initialize variables\n",
    "testcase_dir = './benchmark'\n",
    "\n",
    "# Load the API token\n",
    "client = OpenAI(\n",
    "  api_key=chatgpt_token\n",
    ")\n",
    "\n",
    "# Print some header information\n",
    "print(\"{:<25} | {:<10} | {:<15} | {:<15} | {:<15}\".format(\"Testcase\", \"True CWE\", \"True Positive?\", \"Detected CWE\", \"Result\"))\n",
    "print(\"=\"*100)\n",
    "\n",
    "# Iterate through the list of files and perform analysis\n",
    "for file_path in glob.glob(testcase_dir + '/*.java'):\n",
    "    # Get the textcase identifier and associated information\n",
    "    textcase_id = pathlib.Path(file_path).stem\n",
    "    testcase_true_positive = manifest[textcase_id]['true_positive']\n",
    "    testcase_cwe = manifest[textcase_id]['cwe']\n",
    "\n",
    "    # Import the file data\n",
    "    with open(file_path, 'r') as input_fh:\n",
    "        # Srtip out the block comment data\n",
    "        file_data = re.sub(r\"\\/\\*(.|\\n)+\\*\\/\", \"\", input_fh.read())\n",
    "\n",
    "    # Define the prompt\n",
    "    generic_prompt = \"Manually review the code snippet shown below and identify any potential security issues. Do not write or execute any code during your analysis. There may or may not be any security issues in the code. If there is an issue, return only the most closely associated CWE number and nothing else in the form CWE-XXX. If there is no security issue, return None.\\n\\n{}\".format(file_data)\n",
    "\n",
    "    # Send a prompt\n",
    "    completion = client.chat.completions.create(\n",
    "    model=\"gpt-4o-mini\",\n",
    "    store=True,\n",
    "    messages=[\n",
    "        {\"role\": \"system\", \"content\": \"Do not ever write or execute any code to perform analysis.\"},\n",
    "        {\"role\": \"user\", \"content\": generic_prompt}\n",
    "    ]\n",
    "    )\n",
    "\n",
    "    # Capture the response\n",
    "    response = completion.choices[0].message.content\n",
    "\n",
    "    # CWE identified?\n",
    "    if 'CWE' in response:\n",
    "        cwe_found = True\n",
    "    else:\n",
    "        cwe_found = False\n",
    "\n",
    "    # Correct CWE found?\n",
    "    if testcase_cwe in response:\n",
    "        correct_cwe_found = True\n",
    "    else:\n",
    "        correct_cwe_found = False\n",
    "\n",
    "    # Compute the result\n",
    "    if correct_cwe_found and testcase_true_positive:\n",
    "        result = 'True Positive'\n",
    "    elif cwe_found and not testcase_true_positive:\n",
    "        result = 'False Positive'\n",
    "    elif cwe_found and testcase_true_positive and not correct_cwe_found:\n",
    "        result = 'Potential True Positive'\n",
    "    elif not cwe_found and not testcase_true_positive:\n",
    "        result = 'True Negative'\n",
    "    else:\n",
    "        result = 'False Negative'\n",
    "\n",
    "    # Print a status message\n",
    "    print('{:<25} | {:<10} | {:<15} | {:<15} | {:<15}'.format(textcase_id, testcase_cwe, testcase_true_positive, response, result))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Targeted Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testcase                  | True CWE   | True Positive?  | Detection?      | Result         \n",
      "====================================================================================================\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BenchmarkTest01224        | CWE-643    | 1               | False           | False Negative \n",
      "BenchmarkTest00321        | CWE-501    | 1               | False           | False Negative \n",
      "BenchmarkTest00008        | CWE-89     | 1               | True            | True Positive  \n",
      "BenchmarkTest00090        | CWE-78     | 0               | True            | False Positive \n",
      "BenchmarkTest00028        | CWE-22     | 1               | True            | True Positive  \n",
      "BenchmarkTest00252        | CWE-501    | 0               | False           | True Negative  \n",
      "BenchmarkTest00069        | CWE-328    | 0               | False           | True Negative  \n",
      "BenchmarkTest00086        | CWE-330    | 1               | False           | False Negative \n",
      "BenchmarkTest00012        | CWE-90     | 1               | True            | True Positive  \n",
      "BenchmarkTest00442        | CWE-643    | 1               | True            | True Positive  \n",
      "BenchmarkTest00100        | CWE-89     | 1               | True            | True Positive  \n",
      "BenchmarkTest00116        | CWE-643    | 0               | False           | True Negative  \n",
      "BenchmarkTest00004        | CWE-501    | 1               | False           | False Negative \n",
      "BenchmarkTest00140        | CWE-330    | 1               | False           | False Negative \n",
      "BenchmarkTest00005        | CWE-327    | 1               | True            | True Positive  \n",
      "BenchmarkTest00117        | CWE-643    | 0               | False           | True Negative  \n",
      "BenchmarkTest00052        | CWE-89     | 0               | True            | False Positive \n",
      "BenchmarkTest00101        | CWE-89     | 1               | False           | False Negative \n",
      "BenchmarkTest00044        | CWE-90     | 1               | True            | True Positive  \n",
      "BenchmarkTest00087        | CWE-614    | 1               | False           | False Negative \n",
      "BenchmarkTest00300        | CWE-614    | 1               | False           | False Negative \n",
      "BenchmarkTest00029        | CWE-328    | 1               | False           | False Negative \n",
      "BenchmarkTest00009        | CWE-328    | 0               | False           | True Negative  \n",
      "BenchmarkTest00064        | CWE-22     | 0               | True            | False Positive \n",
      "BenchmarkTest00121        | CWE-327    | 0               | True            | False Positive \n",
      "BenchmarkTest00530        | CWE-90     | 0               | True            | False Positive \n",
      "BenchmarkTest00072        | CWE-328    | 0               | False           | True Negative  \n",
      "BenchmarkTest00096        | CWE-330    | 0               | False           | True Negative  \n",
      "BenchmarkTest00242        | CWE-614    | 0               | False           | True Negative  \n",
      "BenchmarkTest00151        | CWE-79     | 0               | True            | False Positive \n",
      "BenchmarkTest00278        | CWE-79     | 0               | False           | True Negative  \n",
      "BenchmarkTest00106        | CWE-89     | 1               | True            | True Positive  \n",
      "BenchmarkTest00043        | CWE-89     | 1               | True            | True Positive  \n",
      "BenchmarkTest00110        | CWE-89     | 0               | True            | False Positive \n",
      "BenchmarkTest00147        | CWE-79     | 0               | True            | False Positive \n",
      "BenchmarkTest00002        | CWE-22     | 1               | True            | True Positive  \n",
      "BenchmarkTest00075        | CWE-328    | 0               | False           | True Negative  \n",
      "BenchmarkTest00022        | CWE-328    | 0               | False           | True Negative  \n",
      "BenchmarkTest00171        | CWE-78     | 0               | True            | False Positive \n",
      "BenchmarkTest00063        | CWE-22     | 0               | True            | False Positive \n",
      "BenchmarkTest00059        | CWE-327    | 0               | True            | False Positive \n",
      "BenchmarkTest00058        | CWE-327    | 0               | True            | False Positive \n",
      "BenchmarkTest00367        | CWE-90     | 0               | False           | True Negative  \n",
      "BenchmarkTest00019        | CWE-327    | 1               | True            | True Positive  \n",
      "BenchmarkTest00275        | CWE-79     | 0               | True            | False Positive \n",
      "BenchmarkTest01223        | CWE-643    | 1               | True            | True Positive  \n",
      "BenchmarkTest00035        | CWE-327    | 1               | True            | True Positive  \n",
      "BenchmarkTest00170        | CWE-614    | 1               | False           | False Negative \n",
      "BenchmarkTest00520        | CWE-643    | 0               | False           | True Negative  \n",
      "BenchmarkTest00189        | CWE-501    | 0               | False           | True Negative  \n",
      "BenchmarkTest00023        | CWE-330    | 1               | True            | True Positive  \n",
      "BenchmarkTest00131        | CWE-22     | 0               | True            | False Positive \n",
      "BenchmarkTest00003        | CWE-328    | 1               | False           | False Negative \n",
      "BenchmarkTest00054        | CWE-327    | 0               | False           | True Negative  \n",
      "BenchmarkTest00404        | CWE-614    | 0               | False           | True Negative  \n",
      "BenchmarkTest00107        | CWE-89     | 0               | True            | False Positive \n",
      "BenchmarkTest00042        | CWE-330    | 0               | False           | True Negative  \n",
      "BenchmarkTest00150        | CWE-79     | 1               | True            | True Positive  \n",
      "BenchmarkTest00015        | CWE-78     | 1               | True            | True Positive  \n",
      "BenchmarkTest00097        | CWE-501    | 0               | False           | True Negative  \n",
      "BenchmarkTest00104        | CWE-89     | 0               | True            | False Positive \n",
      "BenchmarkTest00016        | CWE-614    | 0               | False           | True Negative  \n",
      "BenchmarkTest00153        | CWE-79     | 1               | True            | True Positive  \n",
      "BenchmarkTest00169        | CWE-614    | 1               | False           | False Negative \n",
      "BenchmarkTest00094        | CWE-330    | 0               | True            | False Positive \n",
      "BenchmarkTest00149        | CWE-79     | 1               | True            | True Positive  \n",
      "BenchmarkTest00630        | CWE-90     | 1               | True            | True Positive  \n",
      "BenchmarkTest00020        | CWE-327    | 1               | True            | True Positive  \n",
      "BenchmarkTest00132        | CWE-22     | 0               | True            | False Positive \n",
      "BenchmarkTest00098        | CWE-501    | 1               | False           | False Negative \n",
      "BenchmarkTest00077        | CWE-78     | 1               | True            | True Positive  \n",
      "BenchmarkTest00099        | CWE-501    | 0               | False           | True Negative  \n",
      "BenchmarkTest00021        | CWE-90     | 1               | True            | True Positive  \n",
      "BenchmarkTest00277        | CWE-79     | 0               | True            | False Positive \n",
      "BenchmarkTest00148        | CWE-79     | 1               | True            | True Positive  \n",
      "BenchmarkTest00095        | CWE-330    | 0               | False           | True Negative  \n",
      "BenchmarkTest00241        | CWE-614    | 1               | True            | True Positive  \n",
      "BenchmarkTest00607        | CWE-643    | 1               | False           | False Negative \n",
      "BenchmarkTest00017        | CWE-78     | 1               | True            | True Positive  \n",
      "BenchmarkTest00152        | CWE-79     | 1               | True            | True Positive  \n",
      "BenchmarkTest00040        | CWE-22     | 1               | True            | True Positive  \n",
      "BenchmarkTest00105        | CWE-89     | 0               | True            | False Positive \n",
      "BenchmarkTest00001        | CWE-22     | 1               | True            | True Positive  \n",
      "BenchmarkTest00118        | CWE-643    | 0               | False           | True Negative  \n",
      "BenchmarkTest00088        | CWE-614    | 0               | False           | True Negative  \n",
      "BenchmarkTest00122        | CWE-327    | 0               | True            | False Positive \n",
      "BenchmarkTest00860        | CWE-90     | 0               | True            | False Positive \n",
      "BenchmarkTest00134        | CWE-22     | 0               | True            | False Positive \n",
      "BenchmarkTest00071        | CWE-328    | 1               | False           | False Negative \n",
      "BenchmarkTest00006        | CWE-78     | 1               | True            | True Positive  \n",
      "BenchmarkTest00051        | CWE-78     | 0               | True            | False Positive \n",
      "BenchmarkTest00694        | CWE-90     | 1               | True            | True Positive  \n",
      "BenchmarkTest00010        | CWE-330    | 0               | False           | True Negative  \n",
      "BenchmarkTest00207        | CWE-643    | 1               | False           | False Negative \n",
      "BenchmarkTest00084        | CWE-330    | 1               | False           | False Negative \n",
      "BenchmarkTest00250        | CWE-501    | 0               | False           | True Negative  \n",
      "BenchmarkTest00138        | CWE-90     | 0               | True            | False Positive \n",
      "BenchmarkTest00093        | CWE-78     | 0               | True            | False Positive \n",
      "BenchmarkTest00139        | CWE-90     | 0               | True            | False Positive \n",
      "BenchmarkTest00251        | CWE-501    | 1               | False           | False Negative \n",
      "BenchmarkTest00085        | CWE-330    | 1               | False           | False Negative \n",
      "BenchmarkTest00011        | CWE-22     | 1               | True            | True Positive  \n",
      "BenchmarkTest00046        | CWE-328    | 1               | False           | False Negative \n",
      "BenchmarkTest00050        | CWE-327    | 1               | True            | True Positive  \n",
      "BenchmarkTest00683        | CWE-643    | 0               | False           | True Negative  \n",
      "BenchmarkTest00007        | CWE-78     | 1               | True            | True Positive  \n",
      "BenchmarkTest00070        | CWE-328    | 1               | False           | False Negative \n",
      "BenchmarkTest00031        | CWE-501    | 1               | False           | False Negative \n",
      "BenchmarkTest00089        | CWE-614    | 0               | False           | True Negative  \n",
      "BenchmarkTest00158        | CWE-78     | 0               | True            | False Positive \n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "import glob\n",
    "import pathlib\n",
    "from openai import OpenAI\n",
    "\n",
    "# Initialize variables\n",
    "testcase_dir = './TestCases'\n",
    "\n",
    "# Load the API token\n",
    "client = OpenAI(\n",
    "  api_key=chatgpt_token\n",
    ")\n",
    "\n",
    "# Print some header information\n",
    "print(\"{:<25} | {:<10} | {:<15} | {:<15} | {:<15}\".format(\"Testcase\", \"True CWE\", \"True Positive?\", \"Detection?\", \"Result\"))\n",
    "print(\"=\"*100)\n",
    "\n",
    "# Iterate through the list of files and perform analysis\n",
    "for file_path in glob.glob(testcase_dir + '/*.java'):\n",
    "    # Get the textcase identifier and associated information\n",
    "    textcase_id = pathlib.Path(file_path).stem\n",
    "    testcase_true_positive = manifest[textcase_id]['true_positive']\n",
    "    testcase_cwe = manifest[textcase_id]['cwe']\n",
    "\n",
    "    # Import the file data\n",
    "    with open(file_path, 'r') as input_fh:\n",
    "        # Srtip out the block comment data\n",
    "        file_data = re.sub(r\"\\/\\*(.|\\n)+\\*\\/\", \"\", input_fh.read())\n",
    "\n",
    "    # Define the prompt\n",
    "    generic_prompt = \"Manually review the code snippet shown below and determine if {} is present in any part of the code. This CWE may or may not be present in the code. Return only a True/False response and nothing else. Do not write or execute any code during your analysis.\\n\\n{}\".format(testcase_cwe, file_data)\n",
    "\n",
    "    # Send a prompt\n",
    "    completion = client.chat.completions.create(\n",
    "    model=\"gpt-4o-mini\",\n",
    "    store=True,\n",
    "    messages=[\n",
    "        {\"role\": \"system\", \"content\": \"Do not ever write or execute any code to perform analysis.\"},\n",
    "        {\"role\": \"user\", \"content\": generic_prompt}\n",
    "    ]\n",
    "    )\n",
    "\n",
    "    # Capture the response\n",
    "    response = completion.choices[0].message.content\n",
    "\n",
    "    # Determine result\n",
    "    if 'true' in response.lower() and testcase_true_positive:\n",
    "        result = 'True Positive'\n",
    "    elif 'true' in response.lower() and not testcase_true_positive:\n",
    "        result = 'False Positive'\n",
    "    elif 'false' in response.lower() and testcase_true_positive:\n",
    "        result = 'False Negative'\n",
    "    elif 'false' in response.lower() and not testcase_true_positive:\n",
    "        result = 'True Negative'\n",
    "    else:\n",
    "        result = 'unknown'\n",
    "\n",
    "    # Print a status message\n",
    "    print('{:<25} | {:<10} | {:<15} | {:<15} | {:<15}'.format(textcase_id, testcase_cwe, testcase_true_positive, response, result))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
